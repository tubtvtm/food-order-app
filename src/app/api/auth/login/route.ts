
import { NextResponse } from "next/server";
import bcrypt from "bcrypt";
import { prisma } from "@/lib/prisma";

export async function POST(req: Request) {
  try {
    const { email, password, rememberMe } = await req.json();
    
    console.log("üìß Login attempt:", { email, hasPassword: !!password, rememberMe });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö admin credentials ‡πÅ‡∏ö‡∏ö hardcode
    if (email === 'tubtvtm@gmail.com' && password === 'admin123') {
      const adminUser = {
        id: 'admin',
        email: 'tubtvtm@gmail.com',
        name: 'Admin User'
      };

      console.log("‚úÖ Admin login successful");

      const response = NextResponse.json({
        success: true,
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Admin)',
        user: adminUser
      });

      // Set cookie for authentication
      response.cookies.set('user', JSON.stringify(adminUser), {
        httpOnly: false,
        secure: process.env.NODE_ENV === 'production',
        maxAge: rememberMe ? 30 * 24 * 60 * 60 : 24 * 60 * 60
      });

      return response;
    }

    if (!email || !password) {
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" }, { status: 400 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    try {
      const user = await prisma.user.findUnique({ where: { email } });
      console.log("üë§ User found:", !!user, user?.name);
      
      if (!user) {
        return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô" }, { status: 404 });
      }

      const passwordMatch = await bcrypt.compare(password, user.password);
      console.log("üîê Password match:", passwordMatch);
      
      if (!passwordMatch) {
        return NextResponse.json({ error: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 401 });
      }

      console.log("‚úÖ Login successful for:", email);

      const userData = {
        id: user.id,
        email: user.email,
        name: user.name || 'User'
      };

      const response = NextResponse.json({
        success: true,
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        user: userData
      });

      // Set authentication cookie
      response.cookies.set('user', JSON.stringify(userData), {
        httpOnly: false,
        secure: process.env.NODE_ENV === 'production',
        maxAge: rememberMe ? 30 * 24 * 60 * 60 : 24 * 60 * 60
      });

      return response;

    } catch (dbError) {
      console.error('‚ùå Database connection failed:', dbError);
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" },
        { status: 503 }
      );
    }
  } catch (err) {
    console.error("‚ùå LOGIN ERROR:", err);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á" }, { status: 500 });
  }
}

