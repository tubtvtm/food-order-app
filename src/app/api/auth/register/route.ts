import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcrypt";

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { name, email, password } = body;

    console.log('üìù Register attempt:', { 
      name: name || 'undefined', 
      email: email || 'undefined', 
      hasPassword: !!password,
      bodyKeys: Object.keys(body)
    });

    // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (name ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    if (!email || !password) {
      console.log('‚ùå Missing required fields');
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" },
        { status: 400 }
      );
    }

    // ‡πÉ‡∏ä‡πâ email ‡πÄ‡∏õ‡πá‡∏ô name ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ name
    const userName = name || email.split('@')[0] || 'User';
    console.log('üë§ Using userName:', userName);

    if (password.length < 6) {
      console.log('‚ùå Password too short:', password.length);
      return NextResponse.json(
        { error: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" },
        { status: 400 }
      );
    }

    console.log('‚úÖ Validation passed, checking existing user...');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ email ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try {
      const userExists = await prisma.user.findUnique({ where: { email } });
      if (userExists) {
        console.log('‚ùå Email already exists');
        return NextResponse.json(
          { error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" },
          { status: 400 }
        );
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Database check failed, proceeding with registration...');
    }

    console.log('‚úÖ Creating new user...');
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    try {
      const newUser = await prisma.user.create({
        data: {
          name: userName,
          email,
          password: hashedPassword,
        },
      });

      console.log('‚úÖ User created:', { id: newUser.id, email: newUser.email, name: newUser.name });

      return NextResponse.json({ 
        success: true, 
        message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        user: {
          id: newUser.id,
          name: newUser.name,
          email: newUser.email
        }
      }, { status: 201 });

    } catch (createError) {
      console.error('‚ùå Database create error:', createError);
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error("‚ùå REGISTER ERROR:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" },
      { status: 500 }
    );
  }
}



