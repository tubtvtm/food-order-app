'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Image from 'next/image'
import Swal from 'sweetalert2'
import PromptPayQR from '@/components/PromptPayQR'

export default function PaymentPage() {
  const [totalAmount, setTotalAmount] = useState(0)
  const [selectedMethod, setSelectedMethod] = useState<string | null>(null)
  const [timeLeft, setTimeLeft] = useState(15 * 60) // 15 minutes in seconds
  const [isVerifying, setIsVerifying] = useState(false)
  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'failed'>('pending')
  const router = useRouter()

  useEffect(() => {
    const cartItems = JSON.parse(localStorage.getItem('cart') || '[]')
    const total = cartItems.reduce((sum: number, item: any) => sum + (item.price * item.quantity), 0)
    setTotalAmount(total)

    // Start countdown timer
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer)
          Swal.fire({
            icon: 'error',
            title: '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
            text: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ',
            confirmButtonColor: '#000',
          }).then(() => {
            localStorage.removeItem('cart')
            router.push('/')
          })
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  const paymentMethods = [
    {
      id: 'promptpay',
      name: '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå',
      icon: 'üí≥',
      description: '‡∏à‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå',
      
    },

    {
      id: 'cod',
      name: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
      icon: 'üöö',
      description: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    },
  ]

  const handlePayment = async () => {
    if (!selectedMethod) {
      Swal.fire({
        icon: 'warning',
        title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
        confirmButtonColor: '#000',
      })
      return
    }

    setIsVerifying(true)

    if (selectedMethod === 'cod') {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await new Promise(resolve => setTimeout(resolve, 30000))
      setVerificationStatus('success')
    } else if (selectedMethod === 'promptpay') {
      try {
        const response = await fetch('/api/check-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            amount: totalAmount,
            timestamp: Date.now(),
          }),
        })

        const data = await response.json()
        
        if (!data.success) {
          setIsVerifying(false)
          setVerificationStatus('failed')
          Swal.fire({
            icon: 'error',
            title: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            confirmButtonColor: '#000',
          })
          return
        }

        setVerificationStatus('success')
      } catch (error) {
        setIsVerifying(false)
        Swal.fire({
          icon: 'error',
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          confirmButtonColor: '#000',
        })
        return
      }
    }

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    setIsVerifying(false)
    Swal.fire({
      icon: 'success',
      title: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ',
      text: selectedMethod === 'cod' ? '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ' : '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      confirmButtonColor: '#000',
    }).then(() => {
      localStorage.removeItem('cart')
      router.push('/orders')
    })
  }

  return (
    
    
    <div className="min-h-screen flex flex-col items-center justify-center px-4 py-8 bg-gray-50">
      <div className="max-w-md w-full bg-white rounded-2xl shadow-lg overflow-hidden">
        <div className="p-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
          <div className="flex justify-between items-center mb-4">
            <p className="text-gray-600">
              ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <span className="font-bold text-xl">{totalAmount} ‡∏ö‡∏≤‡∏ó</span>
            </p>
            <p className="text-sm text-rose-600">
              ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
            </p>
          </div>
          <p className="text-sm text-gray-500 mb-6">* ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</p>

          <div className="space-y-3 mb-6">
            <p className="font-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</p>
            {paymentMethods.map((method) => (
              <button
                key={method.id}
                onClick={() => setSelectedMethod(method.id)}
                className={`w-full p-4 rounded-xl border-2 transition-all ${
                  selectedMethod === method.id
                    ? 'border-black bg-black text-white'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{method.icon}</span>
                  <div className="text-left">
                    <p className="font-semibold">{method.name}</p>
                    <p className="text-sm opacity-75">{method.description}</p>
                  </div>
                </div>
              </button>
            ))}
          </div>

          {selectedMethod === 'promptpay' && (
            <div className="mb-6">
              <PromptPayQR amount={totalAmount} />
              <p className="text-sm text-gray-500 mt-4 text-center">
                * ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </p>
            </div>
          )}

          <button
            onClick={handlePayment}
            disabled={isVerifying}
            className={`w-full py-3 px-4 rounded-lg font-semibold transition-all ${
              isVerifying 
                ? 'bg-gray-400 cursor-not-allowed' 
                : 'bg-black text-white hover:bg-gray-800'
            }`}
          >
            {isVerifying ? (
              <>
                {selectedMethod === 'cod' 
                  ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)...'
                  : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...'}
              </>
            ) : (
              '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
            )}
          </button>
        </div>
      </div>
    </div>
  )
}